{
  "openapi": "3.1.0",
  "info": {
    "title": "Headliner API",
    "version": "1.0.0",
    "description": "API for user authentication, data, and recipes",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://tasteorama.onrender.com/api"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "User authentication"
    },
    {
      "name": "Users",
      "description": "User information"
    },
    {
      "name": "Categories",
      "description": "Recipe categories"
    },
    {
      "name": "Ingredients",
      "description": "Recipe ingredients"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "registerUser",
        "description": "Register a new user with name, email, and password.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "responses": {
          "204": {
            "description": "Successfully logged out"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get category list",
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get ingredient list",
        "responses": {
          "200": {
            "description": "Ingredients retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientsResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "serhii@example.com",
            "description": "Valid email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "example": "Qwerty123!",
            "description": "Password (8–128 characters)"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully logged in an user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "example": "AYxGE67cK4Ke/zLQ4BQCbPjtlR7OC3GXasuHOUS1"
              }
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "UnauthorizedError"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Unauthorized"
              }
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "NotFoundError"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "User not found"
              }
            }
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password",
          "confirmPassword"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "example": "Kateryna",
            "description": "User's full name (2–100 characters)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "kateryna@example.com",
            "description": "Valid email address"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 128,
            "example": "Password123!",
            "description": "Password (8–128 characters; must include uppercase, lowercase, number, special character)"
          },
          "confirmPassword": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 128,
            "example": "Password123!",
            "description": "Must match the password field"
          }
        }
      },
      "RegisterSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "68625286ccc2346b9b5c58a1"
              },
              "name": {
                "type": "string",
                "example": "test11"
              },
              "email": {
                "type": "string",
                "example": "test11@example.com"
              },
              "favorites": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": []
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              }
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "BadRequestError"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Bad request"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"name\" is not allowed to be empty"
                    },
                    "path": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "example": "string.empty"
                    },
                    "context": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "example": "name"
                        },
                        "value": {
                          "type": "string",
                          "example": ""
                        },
                        "key": {
                          "type": "string",
                          "example": "name"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ConflictErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 409,
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "example": "Email in use",
            "description": "Error message"
          }
        }
      },
      "ServerErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found user"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "68625286ccc2346b9b5c58a1"
              },
              "name": {
                "type": "string",
                "example": "test11"
              },
              "email": {
                "type": "string",
                "example": "test11@example.com"
              },
              "favorites": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": []
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              }
            }
          }
        }
      },
      "CategoriesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found categories"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "6462a6cd4c3d0ddd28897f8a"
                },
                "name": {
                  "type": "string",
                  "example": "Seafood"
                }
              }
            }
          }
        }
      },
      "IngredientsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found ingredients"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "665c61ff89123b001c5c5678"
                },
                "name": {
                  "type": "string",
                  "example": "Egg"
                },
                "desc": {
                  "type": "string",
                  "example": "A chicken egg"
                },
                "img": {
                  "type": "string",
                  "format": "uri",
                  "example": "http://example.com/egg.jpg"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "ValidationErrorResponse": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        }
      },
      "ServerErrorResponse": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedErrorResponse"
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundErrorResponse"
            }
          }
        }
      }
    }
  }
}