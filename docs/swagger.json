{
  "openapi": "3.1.0",
  "info": {
    "title": "Headliner API",
    "version": "1.0.0",
    "description": "This API provides a complete solution for managing a recipe-sharing platform. It allows users to browse, search, and filter recipes, as well as register, log in, and manage their profiles and favorite recipes. The API supports both public and private routes with authentication and authorization mechanisms.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://tasteorama.onrender.com/api"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "User authentication"
    },
    {
      "name": "Users",
      "description": "User information"
    },
    {
      "name": "Categories",
      "description": "Recipe categories"
    },
    {
      "name": "Ingredients",
      "description": "Recipe ingredients"
    },
    {
      "name": "Recipes",
      "description": "Recipe information"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "Register a new user with name, email, and password.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "security": [],
        "description": "Authenticate user and return access token in response, refreshToken and sessionId as HTTP-only cookies.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "headers": {
              "Set-Cookie": {
                "description": "HTTP-only cookies for refreshToken and sessionId will be set.",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=wQgb97oZjc6E2rjGYP8WZj6cFPwSjZV58tV3QVnA; sessionId=j%3A%22684bd6c9c89150805aea7579%22"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "Read `refreshToken` and `sessionId` from HTTP-only cookies, validate session, delete it, and clear both cookies",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out (No Content)"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Retrieve information about current user. Requires authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get categories list",
        "operationId": "getCategories",
        "description": "Retrieve a list of all categories.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully found categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get ingredient list",
        "operationId": "getIngredients",
        "description": "Retrieve a list of ingredient",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully found ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientsResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    },
    "/recipes": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create recipe",
        "operationId": "createRecipe",
        "description": "Create a recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RecipeCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a recipe",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipesResponsesCreat"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      },
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get list of recipes",
        "operationId": "getRecipes",
        "description": "Get list of recipes with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "example": "sugar",
              "description": "Filter by ingredient"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recipes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    },
    "/recipes/{recipeId}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipe by ID",
        "operationId": "getRecipe",
        "description": "Retrieve a specific recipe by its unique ID.",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            },
            "description": "Unique recipe identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipe with id 6462a8f74c3d0ddd28897fcd!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "6462a8f74c3d0ddd28897fcd"
                        },
                        "title": {
                          "type": "string",
                          "example": "Borscht"
                        },
                        "category": {
                          "type": "string",
                          "example": "Soups"
                        },
                        "owner": {
                          "type": "string",
                          "example": "userId"
                        },
                        "area": {
                          "type": "string",
                          "example": "Ukrainian cuisine"
                        },
                        "instructions": {
                          "type": "string",
                          "example": "Boil, add..."
                        },
                        "description": {
                          "type": "string",
                          "example": "Traditional Ukrainian borscht"
                        },
                        "thumb": {
                          "type": "string",
                          "example": "http://example.com/image.jpg"
                        },
                        "time": {
                          "type": "string",
                          "example": "60 min"
                        },
                        "ingredients": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string",
                                    "example": "ingredientId"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "Beetroot"
                                  }
                                }
                              },
                              "measure": {
                                "type": "string",
                                "example": "200 g"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/recipes/own": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get own recipes",
        "operationId": "getOwnRecipes",
        "description": "Returns paginated list of recipes created by the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number (starting from 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found own recipes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipesResponsesAll"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          }
        }
      }
    },
    "/recipes/favorites/{recipeId}": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add recipe to favorites",
        "operationId": "addFavoriteRecipe",
        "description": "Adds the selected recipe to the current user's favorites list",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "description": "The ID of the recipe to add to favorites",
            "schema": {
              "type": "string",
              "example": "685166d165ae9c02b6d54ab9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe successfully added to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipesResponsesAddFavorite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Remove recipe from favorites",
        "operationId": "deleteFavoriteRecipe",
        "description": "Delete a recipe from user`s favorites",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "685166d165ae9c02b6d54ab9"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe successfully removed from favorites"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    },
    "/recipes/favorites": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all favorite recipes",
        "operationId": "getFavoriteRecipes",
        "description": "Gets the list of favorite recipes of the current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipesResponsesAll"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "serhii@example.com",
            "description": "Valid email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "example": "Qwerty123!",
            "description": "Password (8–128 characters)"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully logged in an user!"
          },
          "data": {
            "type": "object",
            "required": [
              "accessToken"
            ],
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "JWT access token (expires in 15 minutes)",
                "example": "AYxGE67cK4Ke/zLQ4BQCbPjtlR7OC3GXasuHOUS1"
              }
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "UnauthorizedError"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Unauthorized"
              }
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "NotFoundError"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "User not found"
              }
            }
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "example": "Kateryna",
            "description": "User's full name (2-100 characters)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "kateryna@example.com",
            "description": "Valid email address"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 128,
            "example": "Password123!",
            "description": "Password (8–128 characters; must include uppercase, lowercase, number, special character)"
          }
        }
      },
      "RegisterSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "68625286ccc2346b9b5c58a1"
              },
              "name": {
                "type": "string",
                "example": "test11"
              },
              "email": {
                "type": "string",
                "example": "test11@example.com"
              },
              "favorites": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": []
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              }
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "BadRequestError"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Bad request"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"name\" is not allowed to be empty"
                    },
                    "path": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "example": "string.empty"
                    },
                    "context": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "example": "name"
                        },
                        "value": {
                          "type": "string",
                          "example": ""
                        },
                        "key": {
                          "type": "string",
                          "example": "name"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ConflictErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 409,
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "example": "Email in use",
            "description": "Error message"
          }
        }
      },
      "ServerErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found user"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "68625286ccc2346b9b5c58a1"
              },
              "name": {
                "type": "string",
                "example": "test11"
              },
              "email": {
                "type": "string",
                "example": "test11@example.com"
              },
              "favorites": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "65e4decdd286b30065d54af9"
                },
                "example": []
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-30T09:01:58.006Z"
              }
            }
          }
        }
      },
      "CategoriesResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found categories"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "6462a6cd4c3d0ddd28897f8a"
                },
                "name": {
                  "type": "string",
                  "example": "Seafood"
                }
              }
            }
          }
        }
      },
      "IngredientsResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found ingredients"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "665c61ff89123b001c5c5678"
                },
                "name": {
                  "type": "string",
                  "example": "Egg"
                },
                "desc": {
                  "type": "string",
                  "example": "A chicken egg"
                },
                "img": {
                  "type": "string",
                  "format": "uri",
                  "example": "http://example.com/egg.jpg"
                }
              }
            }
          }
        }
      },
      "Recipes": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "category",
          "owner",
          "instructions",
          "description",
          "time",
          "ingredients",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "Recipe's id",
            "type": "string",
            "example": "685166d165ae9c02b6d54ab9"
          },
          "title": {
            "description": "Recipe's name",
            "type": "string",
            "example": "French Omelette",
            "maxLength": 64
          },
          "category": {
            "description": "Recipe's category",
            "type": "string",
            "example": "Breakfest"
          },
          "owner": {
            "description": "User`s autorization id",
            "type": "string",
            "example": "685166d165ae9c02b6d54ab9"
          },
          "area": {
            "description": "Country of origin of the recipe",
            "type": "string",
            "example": "Ukraine"
          },
          "calories": {
            "description": "Number of calories in the recipe",
            "type": "integer",
            "example": 150,
            "minimum": 1,
            "maximum": 10000
          },
          "instructions": {
            "description": "Preparation Steps",
            "type": "string",
            "example": "1. Crack the eggs into a small bowl. Add a pinch of salt and a bit of black pepper. Whisk the eggs with a fork or whisk until smooth and slightly foamy...",
            "maxLength": 1200
          },
          "description": {
            "description": "About recipe",
            "type": "string",
            "example": "A French omelette is known for its soft, tender texture and lack of browning on the outside....",
            "maxLength": 200
          },
          "thumb": {
            "description": "Recipe photo (JPG/PNG), maxSize: 2MB",
            "type": "string",
            "format": "uri",
            "example": "https://res.cloudinary.com/dpghvuuyl/image/upload/image.png"
          },
          "time": {
            "description": "Cooking time",
            "type": "string",
            "example": "5-7 minutes",
            "minLength": 1,
            "maxLength": 360
          },
          "ingredients": {
            "type": "array",
            "description": "List of ingredients with measure",
            "items": {
              "type": "object",
              "required": [
                "id",
                "measure"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Ingredients id",
                  "example": "685166d165ae9c02b6d54ab9"
                },
                "measure": {
                  "type": "string",
                  "description": "Measurement unit or amount",
                  "example": "15 g",
                  "minLength": 2,
                  "maxLength": 16
                }
              }
            }
          },
          "createdAt": {
            "description": "Contact's createdAt",
            "type": "string",
            "example": "2025-06-17T13:00:01.774+00:00"
          },
          "updatedAt": {
            "description": "Contact's updatedAt",
            "type": "string",
            "example": "2025-06-17T13:00:01.774+00:00"
          }
        }
      },
      "RecipeCreateRequest": {
        "type": "object",
        "required": [
          "title",
          "category",
          "owner",
          "instructions",
          "description",
          "time",
          "ingredients"
        ],
        "properties": {
          "_id": {
            "description": "Recipe's id",
            "type": "string",
            "example": "685166d165ae9c02b6d54ab9"
          },
          "title": {
            "description": "Recipe's name",
            "type": "string",
            "example": "French Omelette",
            "maxLength": 64
          },
          "category": {
            "description": "Recipe's category",
            "type": "string",
            "example": "Breakfest"
          },
          "owner": {
            "description": "User`s autorization id",
            "type": "string",
            "example": "685166d165ae9c02b6d54ab9"
          },
          "area": {
            "description": "Country of origin of the recipe",
            "type": "string",
            "example": "Ukraine"
          },
          "calories": {
            "description": "Number of calories in the recipe",
            "type": "integer",
            "example": 150,
            "minimum": 1,
            "maximum": 10000
          },
          "instructions": {
            "description": "Preparation Steps",
            "type": "string",
            "example": "1. Crack the eggs into a small bowl. Add a pinch of salt and a bit of black pepper. Whisk the eggs with a fork or whisk until smooth and slightly foamy...",
            "maxLength": 1200
          },
          "description": {
            "description": "About recipe",
            "type": "string",
            "example": "A French omelette is known for its soft, tender texture and lack of browning on the outside....",
            "maxLength": 200
          },
          "thumb": {
            "description": "Recipe photo (JPG/PNG), maxSize: 2MB",
            "type": "string",
            "format": "binary",
            "example": "https://res.cloudinary.com/dpghvuuyl/image/upload/image.png"
          },
          "time": {
            "description": "Cooking time",
            "type": "string",
            "example": "5-7 minutes",
            "minLength": 1,
            "maxLength": 360
          },
          "ingredients": {
            "type": "array",
            "description": "List of ingredients with measure",
            "items": {
              "type": "object",
              "required": [
                "id",
                "measure"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Ingredients id",
                  "example": "685166d165ae9c02b6d54ab9"
                },
                "measure": {
                  "type": "string",
                  "description": "Measurement unit or amount",
                  "example": "15 g",
                  "minLength": 2,
                  "maxLength": 16
                }
              }
            }
          }
        }
      },
      "RecipesResponsesCreat": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully created a recipe!"
          },
          "data": {
            "$ref": "#/components/schemas/Recipes"
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "BadRequestError"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string",
                "example": "Bad Request"
              }
            }
          }
        }
      },
      "RecipesResponsesAll": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data",
          "page",
          "perPage",
          "totalItems",
          "totalPages",
          "hasNextPage",
          "hasPreviousPage"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found recipes!"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipes"
            }
          },
          "page": {
            "type": "integer",
            "example": 1
          },
          "perPage": {
            "type": "integer",
            "example": 10
          },
          "totalItems": {
            "type": "integer",
            "example": 100
          },
          "totalPages": {
            "type": "integer",
            "example": 10
          },
          "hasNextPage": {
            "type": "boolean",
            "example": false
          },
          "hasPreviousPage": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "RecipesResponsesAddFavorite": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Recipe added to favorites"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequest"
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        }
      },
      "ServerErrorResponse": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedErrorResponse"
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundErrorResponse"
            }
          }
        }
      }
    }
  }
}